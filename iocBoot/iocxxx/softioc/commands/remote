register "remote" remote

get_random_port() {
	# Variables used to calculatate a random port for procServ
	START=50000
	NUM_PORTS=100

    # Get a random port for procServ
    while :
    do
        i=$(( $RANDOM % $NUM_PORTS + $START ))
        ${NC} -z localhost $i
        if [ $? ]
        then
            echo "$i"
            break
        fi
    done
}

remote() {
	ONOFF=$1
	
	if [ $ONOFF == "enable" ] ; then
		if [[ $(psinfo $INFO_COMMAND $INFO_PID) -ne -1 ]] ; then
			${ECHO} "Command console already running at $(psinfo $INFO_COMMAND $INFO_IP):$(psinfo $INFO_COMMAND $INFO_PORT)"
			return
		fi
	
		MY_IP=`hostname -I`
		
		ENDPOINT="${MY_IP}:$(get_random_port)"
		INFO_FILE="$(psinfo $INFO_COMMAND $INFO_PREFIX).txt"
		LOG_FILE="${SNAME}/logs/$(psinfo $INFO_COMMAND $INFO_PREFIX).log_"`date +%y%m%d-%H%M%S`
		
		# Start Command Port
		${PROCSERV} ${PROCSERV_OPTIONS} --oneshot --quiet -L ${LOG_FILE} -i ^C --logoutcmd=^D -I "${INFO_FILE}" "${ENDPOINT}" ${SNAME}/${IOC_NAME}.sh remote commandline
	fi
	
	if [ $ONOFF == "disable" ] ; then
		if [[ $(psinfo $INFO_COMMAND $INFO_SAME_HOST) -ne 0 ]] ; then
	
			if [[ $(psinfo $INFO_COMMAND $INFO_PID) -ne -1 ]] ; then
				send_command $INFO_COMMAND "exit"
			fi
		
			if [[ $(psinfo $INFO_CONSOLE $INFO_PID) -ne -1 ]] ; then
				remote_cmd stop
			fi
			
		else
			${ECHO} "Command console not running on this computer"
		fi
	fi
	
	if [ $ONOFF == "commandline" ] ; then
		${ECHO} -n "> "
	
		while IFS='$\n' read -ra line; do
		
			TEMP=($line)
		
			if [[ ${#TEMP[@]} -eq 1 ]] ; then
				if [ $line == "exit" ] ; then
					break
				fi
			fi
				
			remote_cmd $line
			
			${ECHO} -n "> "
		done
	fi
}

remote_usage() {
	${ECHO} "$(${BASENAME} ${0}) remote enable/disable"
}
