##### Motors

#- OMS VME driver setup parameters:
#-     (1)cards, (2)base address(short, 16-byte boundary),
#-     (3)interrupt vector (0=disable or  64 - 255), (4)interrupt level (1 - 6),
#-     (5)motor task polling rate (min=1Hz,max=60Hz)
#omsSetup(2, 0xFC00, 180, 5, 10)

#- OMS VME58 driver setup parameters:
#-     (1)cards, (2)base address(short, 4k boundary),                  
#-     (3)interrupt vector (0=disable or  64 - 255), (4)interrupt level (1 - 6),
#-     (5)motor task polling rate (min=1Hz,max=60Hz)
#oms58Setup(2, 0x4000, 190, 5, 10)

#- OMS MAXv driver setup parameters: 
#-     (1)number of cards in array.
#-     (2)VME Address Type (16,24,32).
#-     (3)Base Address on 4K (0x1000) boundary.
#-     (4)interrupt vector (0=disable or  64 - 255).
#-     (5)interrupt level (2 - 6).
#-     (6)motor task polling rate (min=1Hz,max=60Hz).
#drvMAXvdebug=4
MAXvSetup(2, 16, 0xE000, 180, 5, 10)

#- OMS MAXv configuration string:
#-     (1) number of card being configured (0-14).
#-     (2) configuration string; axis type (PSO/PSE/PSM) MUST be set here.
#-         For example, set which TTL signal level defines an active limit
#-         switch.  The "config" example below sets X,Y,Z,T to active low (LTL),
#-         sets U,V,R,S to active high (LTH) and sets all axes to open-loop
#-         stepper (PSO). See MAXv User's Manual for LTL/LTH and PSO/PSE/PSM
#-         commands.
#- config="AX LTL PSO; AY LTL PSO; AZ LTL PSO; AT LTL PSO; AU LTH PSO; AV LTH PSO; AR LTH PSO; AS LTH PSO;"
#-     (3) SSI based absolute encoder bit flag. Bit #0 for Axis X, bit #1 for
#-         Axis Y, etc.. Set a bit flag to '1' for absolute encoder values; '0'
#-         for the standard incremental encoder values.
#-     (4) SSI based absolute encoder grey code flags (0/1 - yes/no, 0x12 -> UY)

epicsEnvSet("config0", "AA; LMH,H,H,H,H,H,H,H; AX LTH PSO; AY LTH PSO; AZ LTL PSO; AT LTL PSO; AU LTL PSO; AV LTL PSO; AR LTL PSO; AS LTL PSO;")
epicsEnvSet("config1", "AA; LMH,H,H,H,H,H,H,H; AX LTL PSE; AY LTL PSE; AZ LTL PSE; AT LTL PSO; AU LTL PSO; AV LTL PSO; AR LTL PSO; AS LTL PSO;")
MAXvConfig(0, "$(config0)", 0, 0)
MAXvConfig(1, "$(config1)", 0, 0)

# Motor substitutions
dbLoadTemplate("substitutions/motor.substitutions", "P=$(PREFIX)")
#dbLoadTemplate("substitutions/softMotor.substitutions", "P=$(PREFIX)")
#dbLoadTemplate("substitutions/pseudoMotor.substitutions", "P=$(PREFIX)")

#iocshLoad("$(MOTOR)/iocsh/motorSim.iocsh", "INSTANCE=motorSim, HOME_POS=0, NUM_AXES=16, HIGH_LIM=32000, LOW_LIM=-32000, SUB=substitutions/motorSim.substitutions")

# Allstop, alldone
iocshLoad("$(MOTOR)/iocsh/allstop.iocsh", "P=$(PREFIX)")

# trajectory scan
#dbLoadRecords("$(MOTOR)/motorApp/Db/trajectoryScan.db","P=$(PREFIX),R=traj1:,NAXES=2,NELM=300,NPULSE=300")
#doAfterIocInit("seq &MAX_trajectoryScan, 'P=$(PREFIX),R=traj1:,M1=m1,M2=m2,M3=m3,M4=m4,M5=m5,M6=m6,M7=m7,M8=m8,PORT=none'")
